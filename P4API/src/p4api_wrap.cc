/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_p4api(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_p4api(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_p4api(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <p4/clientapi.h>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "p4api_wrap.h"

SwigDirector_ClientUser::SwigDirector_ClientUser() : ClientUser(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ClientUser::~SwigDirector_ClientUser() {
  
}


void SwigDirector_ClientUser::InputData(StrBuf *strbuf, Error *e) {
  void * jstrbuf = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackInputData) {
    ClientUser::InputData(strbuf,e);
    return;
  } else {
    jstrbuf = (void *) strbuf; 
    je = (void *) e; 
    swig_callbackInputData(jstrbuf, je);
  }
}

void SwigDirector_ClientUser::HandleError(Error *err) {
  void * jerr = 0 ;
  
  if (!swig_callbackHandleError) {
    ClientUser::HandleError(err);
    return;
  } else {
    jerr = (void *) err; 
    swig_callbackHandleError(jerr);
  }
}

void SwigDirector_ClientUser::Message(Error *err) {
  void * jerr = 0 ;
  
  if (!swig_callbackMessage) {
    ClientUser::Message(err);
    return;
  } else {
    jerr = (void *) err; 
    swig_callbackMessage(jerr);
  }
}

void SwigDirector_ClientUser::OutputError(char const *errBuf) {
  char * jerrBuf = 0 ;
  
  if (!swig_callbackOutputError) {
    ClientUser::OutputError(errBuf);
    return;
  } else {
    jerrBuf = SWIG_csharp_string_callback((const char *)errBuf); 
    swig_callbackOutputError(jerrBuf);
  }
}

void SwigDirector_ClientUser::OutputInfo(char level, char const *data) {
  char jlevel  ;
  char * jdata = 0 ;
  
  if (!swig_callbackOutputInfo) {
    ClientUser::OutputInfo(level,data);
    return;
  } else {
    jlevel = level;
    jdata = SWIG_csharp_string_callback((const char *)data); 
    swig_callbackOutputInfo(jlevel, jdata);
  }
}

void SwigDirector_ClientUser::OutputBinary(char const *data, int length) {
  void * jdata = 0 ;
  int jlength  ;
  
  if (!swig_callbackOutputBinary) {
    ClientUser::OutputBinary(data,length);
    return;
  } else {
    jdata = (void *) data; 
    jlength = length;
    swig_callbackOutputBinary(jdata, jlength);
  }
}

void SwigDirector_ClientUser::OutputText(char const *data, int length) {
  void * jdata = 0 ;
  int jlength  ;
  
  if (!swig_callbackOutputText) {
    ClientUser::OutputText(data,length);
    return;
  } else {
    jdata = (void *) data; 
    jlength = length;
    swig_callbackOutputText(jdata, jlength);
  }
}

void SwigDirector_ClientUser::OutputStat(StrDict *varList) {
  void * jvarList = 0 ;
  
  if (!swig_callbackOutputStat) {
    ClientUser::OutputStat(varList);
    return;
  } else {
    jvarList = (void *) varList; 
    swig_callbackOutputStat(jvarList);
  }
}

void SwigDirector_ClientUser::Prompt(StrPtr const &msg, StrBuf &rsp, int noEcho, Error *e) {
  void * jmsg = 0 ;
  void * jrsp = 0 ;
  int jnoEcho  ;
  void * je = 0 ;
  
  if (!swig_callbackPrompt) {
    ClientUser::Prompt(msg,rsp,noEcho,e);
    return;
  } else {
    jmsg = (StrPtr *) &msg; 
    jrsp = (StrBuf *) &rsp; 
    jnoEcho = noEcho;
    je = (void *) e; 
    swig_callbackPrompt(jmsg, jrsp, jnoEcho, je);
  }
}

void SwigDirector_ClientUser::ErrorPause(char *errBuf, Error *e) {
  char * jerrBuf = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackErrorPause) {
    ClientUser::ErrorPause(errBuf,e);
    return;
  } else {
    jerrBuf = SWIG_csharp_string_callback((const char *)errBuf); 
    je = (void *) e; 
    swig_callbackErrorPause(jerrBuf, je);
  }
}

void SwigDirector_ClientUser::Edit(FileSys *f1, Error *e) {
  void * jf1 = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackEdit__SWIG_0) {
    ClientUser::Edit(f1,e);
    return;
  } else {
    jf1 = (void *) f1; 
    je = (void *) e; 
    swig_callbackEdit__SWIG_0(jf1, je);
  }
}

void SwigDirector_ClientUser::Diff(FileSys *f1, FileSys *f2, int doPage, char *diffFlags, Error *e) {
  void * jf1 = 0 ;
  void * jf2 = 0 ;
  int jdoPage  ;
  char * jdiffFlags = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackDiff) {
    ClientUser::Diff(f1,f2,doPage,diffFlags,e);
    return;
  } else {
    jf1 = (void *) f1; 
    jf2 = (void *) f2; 
    jdoPage = doPage;
    jdiffFlags = SWIG_csharp_string_callback((const char *)diffFlags); 
    je = (void *) e; 
    swig_callbackDiff(jf1, jf2, jdoPage, jdiffFlags, je);
  }
}

void SwigDirector_ClientUser::Merge(FileSys *all_your_base, FileSys *leg1, FileSys *leg2, FileSys *result, Error *e) {
  void * jall_your_base = 0 ;
  void * jleg1 = 0 ;
  void * jleg2 = 0 ;
  void * jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackMerge) {
    ClientUser::Merge(all_your_base,leg1,leg2,result,e);
    return;
  } else {
    jall_your_base = (void *) all_your_base; 
    jleg1 = (void *) leg1; 
    jleg2 = (void *) leg2; 
    jresult = (void *) result; 
    je = (void *) e; 
    swig_callbackMerge(jall_your_base, jleg1, jleg2, jresult, je);
  }
}

int SwigDirector_ClientUser::Resolve(ClientMerge *m, Error *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jm = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackResolve) {
    return ClientUser::Resolve(m,e);
  } else {
    jm = (void *) m; 
    je = (void *) e; 
    jresult = (int) swig_callbackResolve(jm, je);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ClientUser::Help(char const *const *help) {
  void * jhelp = 0 ;
  
  if (!swig_callbackHelp) {
    ClientUser::Help(help);
    return;
  } else {
    jhelp = (void *) help; 
    swig_callbackHelp(jhelp);
  }
}

FileSys *SwigDirector_ClientUser::File(FileSysType type) {
  FileSys *c_result = 0 ;
  void * jresult = 0 ;
  void * jtype  ;
  
  if (!swig_callbackFile) {
    return ClientUser::File(type);
  } else {
    jtype = (void *)&type; 
    jresult = (void *) swig_callbackFile(jtype);
    c_result = (FileSys *)jresult; 
  }
  return c_result;
}

void SwigDirector_ClientUser::Finished() {
  if (!swig_callbackFinished) {
    ClientUser::Finished();
    return;
  } else {
    swig_callbackFinished();
  }
}

void SwigDirector_ClientUser::SetOutputCharset(int arg0) {
  int jarg0  ;
  
  if (!swig_callbackSetOutputCharset) {
    ClientUser::SetOutputCharset(arg0);
    return;
  } else {
    jarg0 = arg0;
    swig_callbackSetOutputCharset(jarg0);
  }
}

void SwigDirector_ClientUser::DisableTmpCleanup() {
  if (!swig_callbackDisableTmpCleanup) {
    ClientUser::DisableTmpCleanup();
    return;
  } else {
    swig_callbackDisableTmpCleanup();
  }
}

int SwigDirector_ClientUser::OutputError(char *errBuf) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jerrBuf = 0 ;
  
  if (!swig_callbackOutputError2) {
    return ClientUser::OutputError(errBuf);
  } else {
    jerrBuf = SWIG_csharp_string_callback((const char *)errBuf); 
    jresult = (int) swig_callbackOutputError2(jerrBuf);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ClientUser::OutputInfo(char level, char *data) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char jlevel  ;
  char * jdata = 0 ;
  
  if (!swig_callbackOutputInfo2) {
    return ClientUser::OutputInfo(level,data);
  } else {
    jlevel = level;
    jdata = SWIG_csharp_string_callback((const char *)data); 
    jresult = (int) swig_callbackOutputInfo2(jlevel, jdata);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ClientUser::OutputBinary(char *data, int length) {
  return ClientUser::OutputBinary(data,length);
}

int SwigDirector_ClientUser::OutputText(char *data, int length) {
  return ClientUser::OutputText(data,length);
}

int SwigDirector_ClientUser::Help(char *const *help) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhelp = 0 ;
  
  if (!swig_callbackHelp2) {
    return ClientUser::Help(help);
  } else {
    jhelp = (void *) help; 
    jresult = (int) swig_callbackHelp2(jhelp);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ClientUser::swig_connect_director(SWIG_Callback0_t callbackInputData, SWIG_Callback1_t callbackHandleError, SWIG_Callback2_t callbackMessage, SWIG_Callback3_t callbackOutputError, SWIG_Callback4_t callbackOutputInfo, SWIG_Callback5_t callbackOutputBinary, SWIG_Callback6_t callbackOutputText, SWIG_Callback7_t callbackOutputStat, SWIG_Callback8_t callbackPrompt, SWIG_Callback9_t callbackErrorPause, SWIG_Callback10_t callbackEdit__SWIG_0, SWIG_Callback11_t callbackDiff, SWIG_Callback12_t callbackMerge, SWIG_Callback13_t callbackResolve, SWIG_Callback14_t callbackHelp, SWIG_Callback15_t callbackFile, SWIG_Callback16_t callbackFinished, SWIG_Callback17_t callbackSetOutputCharset, SWIG_Callback18_t callbackDisableTmpCleanup, SWIG_Callback19_t callbackOutputError2, SWIG_Callback20_t callbackOutputInfo2, SWIG_Callback21_t callbackHelp2) {
  swig_callbackInputData = callbackInputData;
  swig_callbackHandleError = callbackHandleError;
  swig_callbackMessage = callbackMessage;
  swig_callbackOutputError = callbackOutputError;
  swig_callbackOutputInfo = callbackOutputInfo;
  swig_callbackOutputBinary = callbackOutputBinary;
  swig_callbackOutputText = callbackOutputText;
  swig_callbackOutputStat = callbackOutputStat;
  swig_callbackPrompt = callbackPrompt;
  swig_callbackErrorPause = callbackErrorPause;
  swig_callbackEdit__SWIG_0 = callbackEdit__SWIG_0;
  swig_callbackDiff = callbackDiff;
  swig_callbackMerge = callbackMerge;
  swig_callbackResolve = callbackResolve;
  swig_callbackHelp = callbackHelp;
  swig_callbackFile = callbackFile;
  swig_callbackFinished = callbackFinished;
  swig_callbackSetOutputCharset = callbackSetOutputCharset;
  swig_callbackDisableTmpCleanup = callbackDisableTmpCleanup;
  swig_callbackOutputError2 = callbackOutputError2;
  swig_callbackOutputInfo2 = callbackOutputInfo2;
  swig_callbackHelp2 = callbackHelp2;
}

void SwigDirector_ClientUser::swig_init_callbacks() {
  swig_callbackInputData = 0;
  swig_callbackHandleError = 0;
  swig_callbackMessage = 0;
  swig_callbackOutputError = 0;
  swig_callbackOutputInfo = 0;
  swig_callbackOutputBinary = 0;
  swig_callbackOutputText = 0;
  swig_callbackOutputStat = 0;
  swig_callbackPrompt = 0;
  swig_callbackErrorPause = 0;
  swig_callbackEdit__SWIG_0 = 0;
  swig_callbackDiff = 0;
  swig_callbackMerge = 0;
  swig_callbackResolve = 0;
  swig_callbackHelp = 0;
  swig_callbackFile = 0;
  swig_callbackFinished = 0;
  swig_callbackSetOutputCharset = 0;
  swig_callbackDisableTmpCleanup = 0;
  swig_callbackOutputError2 = 0;
  swig_callbackOutputInfo2 = 0;
  swig_callbackHelp2 = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_ErrorId_code_set(void * jarg1, int jarg2) {
  ErrorId *arg1 = (ErrorId *) 0 ;
  int arg2 ;
  
  arg1 = (ErrorId *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorId_code_get(void * jarg1) {
  int jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  int result;
  
  arg1 = (ErrorId *)jarg1; 
  result = (int) ((arg1)->code);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorId_fmt_set(void * jarg1, char * jarg2) {
  ErrorId *arg1 = (ErrorId *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ErrorId *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->fmt = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->fmt, (const char *)arg2);
    } else {
      arg1->fmt = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorId_fmt_get(void * jarg1) {
  char * jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  char *result = 0 ;
  
  arg1 = (ErrorId *)jarg1; 
  result = (char *) ((arg1)->fmt);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorId_SubCode(void * jarg1) {
  int jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  int result;
  
  arg1 = (ErrorId *)jarg1; 
  result = (int)((ErrorId const *)arg1)->SubCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorId_Subsystem(void * jarg1) {
  int jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  int result;
  
  arg1 = (ErrorId *)jarg1; 
  result = (int)((ErrorId const *)arg1)->Subsystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorId_Generic(void * jarg1) {
  int jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  int result;
  
  arg1 = (ErrorId *)jarg1; 
  result = (int)((ErrorId const *)arg1)->Generic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorId_ArgCount(void * jarg1) {
  int jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  int result;
  
  arg1 = (ErrorId *)jarg1; 
  result = (int)((ErrorId const *)arg1)->ArgCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorId_Severity(void * jarg1) {
  int jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  int result;
  
  arg1 = (ErrorId *)jarg1; 
  result = (int)((ErrorId const *)arg1)->Severity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorId_UniqueCode(void * jarg1) {
  int jresult ;
  ErrorId *arg1 = (ErrorId *) 0 ;
  int result;
  
  arg1 = (ErrorId *)jarg1; 
  result = (int)((ErrorId const *)arg1)->UniqueCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorId() {
  void * jresult ;
  ErrorId *result = 0 ;
  
  result = (ErrorId *)new ErrorId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ErrorId(void * jarg1) {
  ErrorId *arg1 = (ErrorId *) 0 ;
  
  arg1 = (ErrorId *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error() {
  void * jresult ;
  Error *result = 0 ;
  
  result = (Error *)new Error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Error(void * jarg1) {
  Error *arg1 = (Error *) 0 ;
  
  arg1 = (Error *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Clear(void * jarg1) {
  Error *arg1 = (Error *) 0 ;
  
  arg1 = (Error *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_Test(void * jarg1) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  result = (int)((Error const *)arg1)->Test();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_IsInfo(void * jarg1) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  result = (int)((Error const *)arg1)->IsInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_IsWarning(void * jarg1) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  result = (int)((Error const *)arg1)->IsWarning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_IsError(void * jarg1) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  result = (int)((Error const *)arg1)->IsError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_IsFatal(void * jarg1) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  result = (int)((Error const *)arg1)->IsFatal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_GetSeverity(void * jarg1) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  result = (int)((Error const *)arg1)->GetSeverity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Error_FmtSeverity(void * jarg1) {
  char * jresult ;
  Error *arg1 = (Error *) 0 ;
  char *result = 0 ;
  
  arg1 = (Error *)jarg1; 
  result = (char *)((Error const *)arg1)->FmtSeverity();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_GetGeneric(void * jarg1) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  result = (int)((Error const *)arg1)->GetGeneric();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Error_Set__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Error *arg1 = (Error *) 0 ;
  ErrorId *arg2 = 0 ;
  Error *result = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (ErrorId *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ErrorId const & type is null", 0);
    return 0;
  } 
  {
    Error &_result_ref = (arg1)->Set((ErrorId const &)*arg2);
    result = (Error *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Error_Set__SWIG_1(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  Error *arg1 = (Error *) 0 ;
  ErrorSeverity arg2 ;
  char *arg3 = (char *) 0 ;
  Error *result = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (ErrorSeverity)jarg2; 
  arg3 = (char *)jarg3; 
  {
    Error &_result_ref = (arg1)->Set(arg2,(char const *)arg3);
    result = (Error *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Sys(void * jarg1, char * jarg2, char * jarg3) {
  Error *arg1 = (Error *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->Sys((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Net(void * jarg1, char * jarg2, char * jarg3) {
  Error *arg1 = (Error *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->Net((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Error_GetId(void * jarg1, int jarg2) {
  void * jresult ;
  Error *arg1 = (Error *) 0 ;
  int arg2 ;
  ErrorId *result = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ErrorId *)((Error const *)arg1)->GetId(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_CheckId(void * jarg1, void * jarg2) {
  int jresult ;
  Error *arg1 = (Error *) 0 ;
  ErrorId *arg2 = 0 ;
  int result;
  
  arg1 = (Error *)jarg1; 
  arg2 = (ErrorId *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ErrorId const & type is null", 0);
    return 0;
  } 
  result = (int)((Error const *)arg1)->CheckId((ErrorId const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Error_GetDict(void * jarg1) {
  void * jresult ;
  Error *arg1 = (Error *) 0 ;
  StrDict *result = 0 ;
  
  arg1 = (Error *)jarg1; 
  result = (StrDict *)(arg1)->GetDict();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Fmt__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  Error *arg1 = (Error *) 0 ;
  StrBuf *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrBuf *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrBuf & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  ((Error const *)arg1)->Fmt(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Fmt__SWIG_2(void * jarg1, void * jarg2) {
  Error *arg1 = (Error *) 0 ;
  StrBuf *arg2 = (StrBuf *) 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrBuf *)jarg2; 
  ((Error const *)arg1)->Fmt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Marshall0(void * jarg1, void * jarg2) {
  Error *arg1 = (Error *) 0 ;
  StrBuf *arg2 = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrBuf *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrBuf & type is null", 0);
    return ;
  } 
  ((Error const *)arg1)->Marshall0(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Marshall1(void * jarg1, void * jarg2) {
  Error *arg1 = (Error *) 0 ;
  StrDict *arg2 = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrDict *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrDict & type is null", 0);
    return ;
  } 
  ((Error const *)arg1)->Marshall1(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Marshall2(void * jarg1, void * jarg2) {
  Error *arg1 = (Error *) 0 ;
  StrBuf *arg2 = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrBuf *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrBuf & type is null", 0);
    return ;
  } 
  ((Error const *)arg1)->Marshall2(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_UnMarshall0(void * jarg1, void * jarg2) {
  Error *arg1 = (Error *) 0 ;
  StrPtr *arg2 = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  (arg1)->UnMarshall0((StrPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_UnMarshall1(void * jarg1, void * jarg2) {
  Error *arg1 = (Error *) 0 ;
  StrDict *arg2 = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrDict *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrDict & type is null", 0);
    return ;
  } 
  (arg1)->UnMarshall1(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_UnMarshall2(void * jarg1, void * jarg2) {
  Error *arg1 = (Error *) 0 ;
  StrPtr *arg2 = 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  (arg1)->UnMarshall2((StrPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Snap(void * jarg1) {
  Error *arg1 = (Error *) 0 ;
  
  arg1 = (Error *)jarg1; 
  (arg1)->Snap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_Dump(void * jarg1, char * jarg2) {
  Error *arg1 = (Error *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Error *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Dump((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPtr_Text(void * jarg1) {
  char * jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  char *result = 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  result = (char *)((StrPtr const *)arg1)->Text();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPtr_Value(void * jarg1) {
  char * jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  char *result = 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  result = (char *)((StrPtr const *)arg1)->Value();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_Length(void * jarg1) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  result = (int)((StrPtr const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPtr_End(void * jarg1) {
  char * jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  char *result = 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  result = (char *)((StrPtr const *)arg1)->End();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_Atoi__SWIG_0(void * jarg1) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  result = (int)((StrPtr const *)arg1)->Atoi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrPtr_Atoi64__SWIG_0(void * jarg1) {
  void * jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  P4INT64 result;
  
  arg1 = (StrPtr *)jarg1; 
  result = ((StrPtr const *)arg1)->Atoi64();
  jresult = new P4INT64((P4INT64 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPtr_SetLength__SWIG_0(void * jarg1) {
  StrPtr *arg1 = (StrPtr *) 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  (arg1)->SetLength();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPtr_SetLength__SWIG_1(void * jarg1, int jarg2) {
  StrPtr *arg1 = (StrPtr *) 0 ;
  int arg2 ;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLength(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPtr_SetEnd(void * jarg1, char * jarg2) {
  StrPtr *arg1 = (StrPtr *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetEnd(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_Compare(void * jarg1, void * jarg2) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  StrPtr *arg2 = 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (int)((StrPtr const *)arg1)->Compare((StrPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_CCompare__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  StrPtr *arg2 = 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (int)((StrPtr const *)arg1)->CCompare((StrPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_SCompare__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  StrPtr *arg2 = 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (int)((StrPtr const *)arg1)->SCompare((StrPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_CCompare__SWIG_1(char * jarg1, char * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)StrPtr::CCompare((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_SCompare__SWIG_1(char * jarg1, char * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)StrPtr::SCompare((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_SCompare__SWIG_2(unsigned char jarg1, unsigned char jarg2) {
  int jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  int result;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (int)StrPtr::SCompare(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_SEqual(unsigned char jarg1, unsigned char jarg2) {
  int jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  int result;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (int)StrPtr::SEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_SCompareN(void * jarg1, void * jarg2) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  StrPtr *arg2 = 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (int)((StrPtr const *)arg1)->SCompareN((StrPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_XCompare__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  StrPtr *arg2 = 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (int)((StrPtr const *)arg1)->XCompare((StrPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_XCompare__SWIG_1(char * jarg1, char * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)StrPtr::XCompare((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_XCompareN(void * jarg1, void * jarg2) {
  int jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  StrPtr *arg2 = 0 ;
  int result;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (int)((StrPtr const *)arg1)->XCompareN((StrPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPtr_Contains(void * jarg1, void * jarg2) {
  char * jresult ;
  StrPtr *arg1 = (StrPtr *) 0 ;
  StrPtr *arg2 = 0 ;
  char *result = 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (char *)((StrPtr const *)arg1)->Contains((StrPtr const &)*arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPtr_StrCpy(void * jarg1, char * jarg2) {
  StrPtr *arg1 = (StrPtr *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (char *)jarg2; 
  ((StrPtr const *)arg1)->StrCpy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPtr_StrCat(void * jarg1, char * jarg2) {
  StrPtr *arg1 = (StrPtr *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  arg2 = (char *)jarg2; 
  ((StrPtr const *)arg1)->StrCat(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_Atoi__SWIG_1(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)StrPtr::Atoi((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPtr_Itoa(int jarg1, char * jarg2) {
  char * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)StrPtr::Itoa(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrPtr_Atoi64__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  P4INT64 result;
  
  arg1 = (char *)jarg1; 
  result = StrPtr::Atoi64((char const *)arg1);
  jresult = new P4INT64((P4INT64 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPtr_Itoa64(void * jarg1, char * jarg2) {
  char * jresult ;
  P4INT64 arg1 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  P4INT64 *argp1 ;
  
  argp1 = (P4INT64 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null P4INT64", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (char *)jarg2; 
  result = (char *)StrPtr::Itoa64(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_CaseFolding() {
  int jresult ;
  int result;
  
  result = (int)StrPtr::CaseFolding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_CaseIgnored() {
  int jresult ;
  int result;
  
  result = (int)StrPtr::CaseIgnored();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_CaseHybrid() {
  int jresult ;
  int result;
  
  result = (int)StrPtr::CaseHybrid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPtr_SetCaseFolding(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  StrPtr::SetCaseFolding(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrPtr_CaseUsage() {
  int jresult ;
  StrPtr::CaseUse result;
  
  result = (StrPtr::CaseUse)StrPtr::CaseUsage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrPtr() {
  void * jresult ;
  StrPtr *result = 0 ;
  
  result = (StrPtr *)new StrPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StrPtr(void * jarg1) {
  StrPtr *arg1 = (StrPtr *) 0 ;
  
  arg1 = (StrPtr *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrRef__SWIG_0() {
  void * jresult ;
  StrRef *result = 0 ;
  
  result = (StrRef *)new StrRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrRef__SWIG_1(void * jarg1) {
  void * jresult ;
  StrRef *arg1 = 0 ;
  StrRef *result = 0 ;
  
  arg1 = (StrRef *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrRef const & type is null", 0);
    return 0;
  } 
  result = (StrRef *)new StrRef((StrRef const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrRef__SWIG_2(void * jarg1) {
  void * jresult ;
  StrPtr *arg1 = 0 ;
  StrRef *result = 0 ;
  
  arg1 = (StrPtr *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (StrRef *)new StrRef((StrPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrRef__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  StrRef *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (StrRef *)new StrRef((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrRef__SWIG_4(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  StrRef *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (StrRef *)new StrRef((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrRef_Null() {
  void * jresult ;
  StrPtr *result = 0 ;
  
  {
    StrPtr const &_result_ref = StrRef::Null();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrRef_Set__SWIG_0(void * jarg1, char * jarg2) {
  StrRef *arg1 = (StrRef *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrRef *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrRef_Set__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  StrRef *arg1 = (StrRef *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (StrRef *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrRef_Set__SWIG_2(void * jarg1, void * jarg2) {
  StrRef *arg1 = (StrRef *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (StrRef *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->Set((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StrRef(void * jarg1) {
  StrRef *arg1 = (StrRef *) 0 ;
  
  arg1 = (StrRef *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrBuf__SWIG_0() {
  void * jresult ;
  StrBuf *result = 0 ;
  
  result = (StrBuf *)new StrBuf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_StringInit(void * jarg1) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  (arg1)->StringInit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StrBuf(void * jarg1) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrBuf__SWIG_1(void * jarg1) {
  void * jresult ;
  StrBuf *arg1 = 0 ;
  StrBuf *result = 0 ;
  
  arg1 = (StrBuf *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrBuf const & type is null", 0);
    return 0;
  } 
  result = (StrBuf *)new StrBuf((StrBuf const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrBuf__SWIG_2(void * jarg1) {
  void * jresult ;
  StrRef *arg1 = 0 ;
  StrBuf *result = 0 ;
  
  arg1 = (StrRef *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrRef const & type is null", 0);
    return 0;
  } 
  result = (StrBuf *)new StrBuf((StrRef const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrBuf__SWIG_3(void * jarg1) {
  void * jresult ;
  StrPtr *arg1 = 0 ;
  StrBuf *result = 0 ;
  
  arg1 = (StrPtr *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (StrBuf *)new StrBuf((StrPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrBuf__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  StrBuf *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (StrBuf *)new StrBuf((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Clear(void * jarg1) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Set__SWIG_0(void * jarg1, char * jarg2) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Set((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Set__SWIG_1(void * jarg1, void * jarg2) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->Set((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Set__SWIG_3(void * jarg1, char * jarg2, int jarg3) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Extend__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Extend((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Extend__SWIG_1(void * jarg1, char jarg2) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  char arg2 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->Extend(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Terminate(void * jarg1) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  (arg1)->Terminate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Append__SWIG_0(void * jarg1, char * jarg2) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Append((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Append__SWIG_1(void * jarg1, void * jarg2) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->Append((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrBuf_Append__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  StrBuf *arg1 = (StrBuf *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Append((char const *)arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrBuf_Alloc(void * jarg1, int jarg2) {
  char * jresult ;
  StrBuf *arg1 = (StrBuf *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (StrBuf *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->Alloc(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrNum__SWIG_0() {
  void * jresult ;
  StrNum *result = 0 ;
  
  result = (StrNum *)new StrNum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrNum__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  StrNum *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (StrNum *)new StrNum(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrNum__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  StrNum *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (StrNum *)new StrNum(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrNum_Set(void * jarg1, int jarg2) {
  StrNum *arg1 = (StrNum *) 0 ;
  int arg2 ;
  
  arg1 = (StrNum *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StrNum(void * jarg1) {
  StrNum *arg1 = (StrNum *) 0 ;
  
  arg1 = (StrNum *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrVarName__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  StrVarName *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (StrVarName *)new StrVarName((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrVarName__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  StrPtr *arg1 = 0 ;
  int arg2 ;
  StrVarName *result = 0 ;
  
  arg1 = (StrPtr *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (StrVarName *)new StrVarName((StrPtr const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrVarName__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  StrPtr *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  StrVarName *result = 0 ;
  
  arg1 = (StrPtr *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (StrVarName *)new StrVarName((StrPtr const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StrVarName(void * jarg1) {
  StrVarName *arg1 = (StrVarName *) 0 ;
  
  arg1 = (StrVarName *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StrDict(void * jarg1) {
  StrDict *arg1 = (StrDict *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_CopyVars(void * jarg1, void * jarg2) {
  StrDict *arg1 = (StrDict *) 0 ;
  StrDict *arg2 = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (StrDict *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrDict & type is null", 0);
    return ;
  } 
  (arg1)->CopyVars(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_0(void * jarg1, char * jarg2) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetVar((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetVar((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetVar((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  StrPtr *arg3 = (StrPtr *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (StrPtr *)jarg3; 
  (arg1)->SetVar((char const *)arg2,(StrPtr const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  StrDict *arg1 = (StrDict *) 0 ;
  StrPtr *arg2 = 0 ;
  StrPtr *arg3 = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  arg3 = (StrPtr *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  (arg1)->SetVar((StrPtr const &)*arg2,(StrPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVarV(void * jarg1, char * jarg2) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetVarV((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetArgv(void * jarg1, int __arg, char *const * jarg2) {
  StrDict *arg1 = (StrDict *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  {
    arg2 = __arg;
    arg3 = (char **) jarg2;
  }
  (arg1)->SetArgv(arg2,(char *const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_6(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  StrDict *arg1 = (StrDict *) 0 ;
  StrPtr *arg2 = 0 ;
  int arg3 ;
  StrPtr *arg4 = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (StrPtr *)jarg4;
  if(!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  (arg1)->SetVar((StrPtr const &)*arg2,arg3,(StrPtr const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_7(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  StrPtr *arg4 = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (StrPtr *)jarg4;
  if(!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  (arg1)->SetVar((char const *)arg2,arg3,(StrPtr const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_SetVar__SWIG_8(void * jarg1, char * jarg2, int jarg3, int jarg4, void * jarg5) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  StrPtr *arg5 = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (StrPtr *)jarg5;
  if(!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  (arg1)->SetVar((char const *)arg2,arg3,arg4,(StrPtr const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrDict_GetVar__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (StrPtr *)(arg1)->GetVar((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrDict_GetVar__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  result = (StrPtr *)(arg1)->GetVar((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrDict_GetVar__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  StrPtr *arg2 = 0 ;
  int arg3 ;
  StrPtr *result = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (StrPtr *)(arg1)->GetVar((StrPtr const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrDict_GetVar__SWIG_3(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  StrPtr *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  StrPtr *result = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (StrPtr *)(arg1)->GetVar((StrPtr const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrDict_GetVar__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  StrPtr *arg2 = 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return 0;
  } 
  result = (StrPtr *)(arg1)->GetVar((StrPtr const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrDict_GetVar__SWIG_5(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  int arg2 ;
  StrRef *arg3 = 0 ;
  StrRef *arg4 = 0 ;
  int result;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (StrRef *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrRef & type is null", 0);
    return 0;
  } 
  arg4 = (StrRef *)jarg4;
  if(!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrRef & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->GetVar(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_ReplaceVar(void * jarg1, char * jarg2, char * jarg3) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ReplaceVar((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_RemoveVar(void * jarg1, char * jarg2) {
  StrDict *arg1 = (StrDict *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RemoveVar((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrDict_Clear(void * jarg1) {
  StrDict *arg1 = (StrDict *) 0 ;
  
  arg1 = (StrDict *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrDict_Save(void * jarg1, void * jarg2) {
  int jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int result;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (FILE *)jarg2; 
  result = (int)(arg1)->Save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StrDict_Load(void * jarg1, void * jarg2) {
  int jresult ;
  StrDict *arg1 = (StrDict *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int result;
  
  arg1 = (StrDict *)jarg1; 
  arg2 = (FILE *)jarg2; 
  result = (int)(arg1)->Load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClientUser() {
  void * jresult ;
  ClientUser *result = 0 ;
  
  result = (ClientUser *)new SwigDirector_ClientUser();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientUser(void * jarg1) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_InputData(void * jarg1, void * jarg2, void * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrBuf *arg2 = (StrBuf *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (StrBuf *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->InputData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_InputDataSwigExplicitClientUser(void * jarg1, void * jarg2, void * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrBuf *arg2 = (StrBuf *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (StrBuf *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->ClientUser::InputData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_HandleError(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  Error *arg2 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (Error *)jarg2; 
  (arg1)->HandleError(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_HandleErrorSwigExplicitClientUser(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  Error *arg2 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (Error *)jarg2; 
  (arg1)->ClientUser::HandleError(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Message(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  Error *arg2 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (Error *)jarg2; 
  (arg1)->Message(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_MessageSwigExplicitClientUser(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  Error *arg2 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (Error *)jarg2; 
  (arg1)->ClientUser::Message(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputError(void * jarg1, char * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OutputError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputErrorSwigExplicitClientUser(void * jarg1, char * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ClientUser::OutputError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputInfo(void * jarg1, char jarg2, char * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->OutputInfo(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputInfoSwigExplicitClientUser(void * jarg1, char jarg2, char * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ClientUser::OutputInfo(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputBinary(void * jarg1, void * jarg2, int jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (unsigned char *) jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->OutputBinary((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputBinarySwigExplicitClientUser(void * jarg1, void * jarg2, int jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (unsigned char *) jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ClientUser::OutputBinary((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputText(void * jarg1, void * jarg2, int jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (unsigned char *) jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->OutputText((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputTextSwigExplicitClientUser(void * jarg1, void * jarg2, int jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (unsigned char *) jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ClientUser::OutputText((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputStat(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrDict *arg2 = (StrDict *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (StrDict *)jarg2; 
  (arg1)->OutputStat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_OutputStatSwigExplicitClientUser(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrDict *arg2 = (StrDict *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (StrDict *)jarg2; 
  (arg1)->ClientUser::OutputStat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Prompt(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrPtr *arg2 = 0 ;
  StrBuf *arg3 = 0 ;
  int arg4 ;
  Error *arg5 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  arg3 = (StrBuf *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrBuf & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  arg5 = (Error *)jarg5; 
  (arg1)->Prompt((StrPtr const &)*arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_PromptSwigExplicitClientUser(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrPtr *arg2 = 0 ;
  StrBuf *arg3 = 0 ;
  int arg4 ;
  Error *arg5 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (StrPtr *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrPtr const & type is null", 0);
    return ;
  } 
  arg3 = (StrBuf *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StrBuf & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  arg5 = (Error *)jarg5; 
  (arg1)->ClientUser::Prompt((StrPtr const &)*arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_ErrorPause(void * jarg1, char * jarg2, void * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->ErrorPause(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_ErrorPauseSwigExplicitClientUser(void * jarg1, char * jarg2, void * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->ClientUser::ErrorPause(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Edit__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSys *arg2 = (FileSys *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (FileSys *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->Edit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_EditSwigExplicitClientUser__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSys *arg2 = (FileSys *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (FileSys *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->ClientUser::Edit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Diff(void * jarg1, void * jarg2, void * jarg3, int jarg4, char * jarg5, void * jarg6) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSys *arg2 = (FileSys *) 0 ;
  FileSys *arg3 = (FileSys *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  Error *arg6 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (FileSys *)jarg2; 
  arg3 = (FileSys *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (Error *)jarg6; 
  (arg1)->Diff(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_DiffSwigExplicitClientUser(void * jarg1, void * jarg2, void * jarg3, int jarg4, char * jarg5, void * jarg6) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSys *arg2 = (FileSys *) 0 ;
  FileSys *arg3 = (FileSys *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  Error *arg6 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (FileSys *)jarg2; 
  arg3 = (FileSys *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (Error *)jarg6; 
  (arg1)->ClientUser::Diff(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Merge(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSys *arg2 = (FileSys *) 0 ;
  FileSys *arg3 = (FileSys *) 0 ;
  FileSys *arg4 = (FileSys *) 0 ;
  FileSys *arg5 = (FileSys *) 0 ;
  Error *arg6 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (FileSys *)jarg2; 
  arg3 = (FileSys *)jarg3; 
  arg4 = (FileSys *)jarg4; 
  arg5 = (FileSys *)jarg5; 
  arg6 = (Error *)jarg6; 
  (arg1)->Merge(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_MergeSwigExplicitClientUser(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSys *arg2 = (FileSys *) 0 ;
  FileSys *arg3 = (FileSys *) 0 ;
  FileSys *arg4 = (FileSys *) 0 ;
  FileSys *arg5 = (FileSys *) 0 ;
  Error *arg6 = (Error *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (FileSys *)jarg2; 
  arg3 = (FileSys *)jarg3; 
  arg4 = (FileSys *)jarg4; 
  arg5 = (FileSys *)jarg5; 
  arg6 = (Error *)jarg6; 
  (arg1)->ClientUser::Merge(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_Resolve(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  ClientMerge *arg2 = (ClientMerge *) 0 ;
  Error *arg3 = (Error *) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (ClientMerge *)jarg2; 
  arg3 = (Error *)jarg3; 
  result = (int)(arg1)->Resolve(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_ResolveSwigExplicitClientUser(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  ClientMerge *arg2 = (ClientMerge *) 0 ;
  Error *arg3 = (Error *) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (ClientMerge *)jarg2; 
  arg3 = (Error *)jarg3; 
  result = (int)(arg1)->ClientUser::Resolve(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Help(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char **)jarg2; 
  (arg1)->Help((char const *const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_HelpSwigExplicitClientUser(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char **)jarg2; 
  (arg1)->ClientUser::Help((char const *const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientUser_File(void * jarg1, void * jarg2) {
  void * jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSysType arg2 ;
  FileSys *result = 0 ;
  FileSysType *argp2 ;
  
  arg1 = (ClientUser *)jarg1; 
  argp2 = (FileSysType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FileSysType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (FileSys *)(arg1)->File(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientUser_FileSwigExplicitClientUser(void * jarg1, void * jarg2) {
  void * jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  FileSysType arg2 ;
  FileSys *result = 0 ;
  FileSysType *argp2 ;
  
  arg1 = (ClientUser *)jarg1; 
  argp2 = (FileSysType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FileSysType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (FileSys *)(arg1)->ClientUser::File(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Finished(void * jarg1) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  (arg1)->Finished();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_FinishedSwigExplicitClientUser(void * jarg1) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  (arg1)->ClientUser::Finished();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_varList_set(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrDict *arg2 = (StrDict *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (StrDict *)jarg2; 
  if (arg1) (arg1)->varList = arg2;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientUser_varList_get(void * jarg1) {
  void * jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  StrDict *result = 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  result = (StrDict *) ((arg1)->varList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_enviro_set(void * jarg1, void * jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  Enviro *arg2 = (Enviro *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (Enviro *)jarg2; 
  if (arg1) (arg1)->enviro = arg2;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientUser_enviro_get(void * jarg1) {
  void * jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  Enviro *result = 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  result = (Enviro *) ((arg1)->enviro);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_Edit__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  FileSys *arg1 = (FileSys *) 0 ;
  Enviro *arg2 = (Enviro *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (FileSys *)jarg1; 
  arg2 = (Enviro *)jarg2; 
  arg3 = (Error *)jarg3; 
  ClientUser::Edit(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_RunCmd(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, void * jarg8) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  Error *arg8 = (Error *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (Error *)jarg8; 
  ClientUser::RunCmd((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_SetOutputCharset(void * jarg1, int jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  int arg2 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOutputCharset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_SetOutputCharsetSwigExplicitClientUser(void * jarg1, int jarg2) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  int arg2 ;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ClientUser::SetOutputCharset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_DisableTmpCleanup(void * jarg1) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  (arg1)->DisableTmpCleanup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_DisableTmpCleanupSwigExplicitClientUser(void * jarg1) {
  ClientUser *arg1 = (ClientUser *) 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  (arg1)->ClientUser::DisableTmpCleanup();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_OutputError2(void * jarg1, char * jarg2) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->OutputError(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_OutputError2SwigExplicitClientUser(void * jarg1, char * jarg2) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->ClientUser::OutputError(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_OutputInfo2(void * jarg1, char jarg2, char * jarg3) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->OutputInfo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_OutputInfo2SwigExplicitClientUser(void * jarg1, char jarg2, char * jarg3) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->ClientUser::OutputInfo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_Help2(void * jarg1, void * jarg2) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  char **arg2 = (char **) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (int)(arg1)->Help((char *const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientUser_Help2SwigExplicitClientUser(void * jarg1, void * jarg2) {
  int jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  char **arg2 = (char **) 0 ;
  int result;
  
  arg1 = (ClientUser *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (int)(arg1)->ClientUser::Help((char *const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientUser_director_connect(void *objarg, SwigDirector_ClientUser::SWIG_Callback0_t callback0, SwigDirector_ClientUser::SWIG_Callback1_t callback1, SwigDirector_ClientUser::SWIG_Callback2_t callback2, SwigDirector_ClientUser::SWIG_Callback3_t callback3, SwigDirector_ClientUser::SWIG_Callback4_t callback4, SwigDirector_ClientUser::SWIG_Callback5_t callback5, SwigDirector_ClientUser::SWIG_Callback6_t callback6, SwigDirector_ClientUser::SWIG_Callback7_t callback7, SwigDirector_ClientUser::SWIG_Callback8_t callback8, SwigDirector_ClientUser::SWIG_Callback9_t callback9, SwigDirector_ClientUser::SWIG_Callback10_t callback10, SwigDirector_ClientUser::SWIG_Callback11_t callback11, SwigDirector_ClientUser::SWIG_Callback12_t callback12, SwigDirector_ClientUser::SWIG_Callback13_t callback13, SwigDirector_ClientUser::SWIG_Callback14_t callback14, SwigDirector_ClientUser::SWIG_Callback15_t callback15, SwigDirector_ClientUser::SWIG_Callback16_t callback16, SwigDirector_ClientUser::SWIG_Callback17_t callback17, SwigDirector_ClientUser::SWIG_Callback18_t callback18, SwigDirector_ClientUser::SWIG_Callback19_t callback19, SwigDirector_ClientUser::SWIG_Callback20_t callback20, SwigDirector_ClientUser::SWIG_Callback21_t callback21) {
  ClientUser *obj = (ClientUser *)objarg;
  SwigDirector_ClientUser *director = dynamic_cast<SwigDirector_ClientUser *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClientApi__SWIG_0() {
  void * jresult ;
  ClientApi *result = 0 ;
  
  result = (ClientApi *)new ClientApi();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientApi(void * jarg1) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetTrans__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetTrans(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetTrans__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetTrans(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetTrans__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetTrans(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetTrans__SWIG_3(void * jarg1, int jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  int arg2 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTrans(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetProtocol(void * jarg1, char * jarg2, char * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetProtocol((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetProtocolV(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetProtocolV((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetProtocol(void * jarg1, char * jarg2) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (StrPtr *)(arg1)->GetProtocol((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_Init(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  Error *arg2 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (Error *)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_Run__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  ClientUser *arg3 = (ClientUser *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ClientUser *)jarg3; 
  (arg1)->Run((char const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientApi_Final(void * jarg1, void * jarg2) {
  int jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  Error *arg2 = (Error *) 0 ;
  int result;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (Error *)jarg2; 
  result = (int)(arg1)->Final(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientApi_Dropped(void * jarg1) {
  int jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  int result;
  
  arg1 = (ClientApi *)jarg1; 
  result = (int)(arg1)->Dropped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientApi_GetErrors(void * jarg1) {
  int jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  int result;
  
  arg1 = (ClientApi *)jarg1; 
  result = (int)(arg1)->GetErrors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_RunTag(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  ClientUser *arg3 = (ClientUser *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ClientUser *)jarg3; 
  (arg1)->RunTag((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_WaitTag__SWIG_0(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  ClientUser *arg2 = (ClientUser *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (ClientUser *)jarg2; 
  (arg1)->WaitTag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_WaitTag__SWIG_1(void * jarg1) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  (arg1)->WaitTag();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetCharset__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCharset((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetClient__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetClient((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetCwd__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCwd((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetHost__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetHost((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetLanguage__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLanguage((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetPassword__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPassword((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetPort__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPort((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetUser__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetUser((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetProg__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetProg((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetVersion__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetVersion((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetTicketFile__SWIG_0(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTicketFile((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetCharset__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetCharset((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetClient__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetClient((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetCwd__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetCwd((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetHost__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetHost((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetLanguage__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetLanguage((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetPassword__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetPassword((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetPort__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetPort((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetUser__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetUser((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetProg__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetProg((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetVersion__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetVersion((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetTicketFile__SWIG_1(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *arg2 = (StrPtr *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (StrPtr *)jarg2; 
  (arg1)->SetTicketFile((StrPtr const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetBreak(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  KeepAlive *arg2 = (KeepAlive *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (KeepAlive *)jarg2; 
  (arg1)->SetBreak(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_DefineCharset(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->DefineCharset((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_DefineClient(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->DefineClient((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_DefineHost(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->DefineHost((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_DefineLanguage(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->DefineLanguage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_DefinePassword(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->DefinePassword((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_DefinePort(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->DefinePort((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_DefineUser(void * jarg1, char * jarg2, void * jarg3) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  Error *arg3 = (Error *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Error *)jarg3; 
  (arg1)->DefineUser((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetCharset(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetCharset();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetClient(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetClient();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetCwd(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetCwd();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetHost(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetHost();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetLanguage(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetLanguage();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetOs(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetOs();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetPassword(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetPassword();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetPort(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetPort();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetUser(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetUser();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientApi_GetConfig(void * jarg1) {
  void * jresult ;
  ClientApi *arg1 = (ClientApi *) 0 ;
  StrPtr *result = 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  {
    StrPtr const &_result_ref = (arg1)->GetConfig();
    result = (StrPtr *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetIgnorePassword(void * jarg1) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  (arg1)->SetIgnorePassword();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClientApi__SWIG_1(void * jarg1) {
  void * jresult ;
  ClientUser *arg1 = (ClientUser *) 0 ;
  ClientApi *result = 0 ;
  
  arg1 = (ClientUser *)jarg1; 
  result = (ClientApi *)new ClientApi(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_SetUi(void * jarg1, void * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  ClientUser *arg2 = (ClientUser *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (ClientUser *)jarg2; 
  (arg1)->SetUi(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientApi_Run__SWIG_1(void * jarg1, char * jarg2) {
  ClientApi *arg1 = (ClientApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ClientApi *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Run((char const *)arg2);
}


SWIGEXPORT StrPtr * SWIGSTDCALL CSharp_StrRefUpcast(StrRef *objectRef) {
    return (StrPtr *)objectRef;
}

SWIGEXPORT StrPtr * SWIGSTDCALL CSharp_StrBufUpcast(StrBuf *objectRef) {
    return (StrPtr *)objectRef;
}

SWIGEXPORT StrPtr * SWIGSTDCALL CSharp_StrNumUpcast(StrNum *objectRef) {
    return (StrPtr *)objectRef;
}

SWIGEXPORT StrRef * SWIGSTDCALL CSharp_StrVarNameUpcast(StrVarName *objectRef) {
    return (StrRef *)objectRef;
}

SWIGEXPORT StrDict * SWIGSTDCALL CSharp_ClientApiUpcast(ClientApi *objectRef) {
    return (StrDict *)objectRef;
}

#ifdef __cplusplus
}
#endif

